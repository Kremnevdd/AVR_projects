
HyroscoPe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001fe  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800102  00800102  00000294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c25  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d9  00000000  00000000  00000f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047e  00000000  00000000  00001772  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b1  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000186  00000000  00000000  00002179  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000022ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  9e:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_setup>:
	// while(!(TWCR & (1<<TWINT)));
	 
	 

	 return data;
}
  a6:	e1 ec       	ldi	r30, 0xC1	; 193
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	88 61       	ori	r24, 0x18	; 24
  ae:	80 83       	st	Z, r24
  b0:	e2 ec       	ldi	r30, 0xC2	; 194
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	86 60       	ori	r24, 0x06	; 6
  b8:	80 83       	st	Z, r24
  ba:	87 e6       	ldi	r24, 0x67	; 103
  bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  c0:	08 95       	ret

000000c2 <UART_sent>:
  c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  c6:	e0 ec       	ldi	r30, 0xC0	; 192
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	85 ff       	sbrs	r24, 5
  ce:	fd cf       	rjmp	.-6      	; 0xca <UART_sent+0x8>
  d0:	08 95       	ret

000000d2 <TWI_start>:
  d2:	8c e0       	ldi	r24, 0x0C	; 12
  d4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  d8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  dc:	84 ee       	ldi	r24, 0xE4	; 228
  de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  e2:	ec eb       	ldi	r30, 0xBC	; 188
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	88 23       	and	r24, r24
  ea:	ec f7       	brge	.-6      	; 0xe6 <TWI_start+0x14>
  ec:	08 95       	ret

000000ee <TWI_STOP>:
  ee:	84 e9       	ldi	r24, 0x94	; 148
  f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  f4:	85 e0       	ldi	r24, 0x05	; 5
  f6:	8a 95       	dec	r24
  f8:	f1 f7       	brne	.-4      	; 0xf6 <TWI_STOP+0x8>
  fa:	00 00       	nop
  fc:	08 95       	ret

000000fe <adr_W_R>:
  fe:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <SLA>
 102:	99 0f       	add	r25, r25
 104:	89 2b       	or	r24, r25
 106:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 10a:	84 ec       	ldi	r24, 0xC4	; 196
 10c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 110:	ec eb       	ldi	r30, 0xBC	; 188
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 23       	and	r24, r24
 118:	ec f7       	brge	.-6      	; 0x114 <adr_W_R+0x16>
 11a:	08 95       	ret

0000011c <TWI_send>:
 11c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 120:	84 ec       	ldi	r24, 0xC4	; 196
 122:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 126:	ec eb       	ldi	r30, 0xBC	; 188
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	88 23       	and	r24, r24
 12e:	ec f7       	brge	.-6      	; 0x12a <TWI_send+0xe>
 130:	08 95       	ret

00000132 <recieve_data_from>:
uint8_t recieve_data_from(uint8_t addr)
{
 132:	cf 93       	push	r28
 134:	c8 2f       	mov	r28, r24
	TWI_start();
 136:	0e 94 69 00 	call	0xd2	; 0xd2 <TWI_start>
	adr_W_R(W);
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 7f 00 	call	0xfe	; 0xfe <adr_W_R>
	TWI_send(addr);
 140:	8c 2f       	mov	r24, r28
 142:	0e 94 8e 00 	call	0x11c	; 0x11c <TWI_send>
	TWI_start();
 146:	0e 94 69 00 	call	0xd2	; 0xd2 <TWI_start>
	adr_W_R(R);
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 7f 00 	call	0xfe	; 0xfe <adr_W_R>
	TWCR = (1<<TWINT)|(1<<TWEN);
 150:	84 e8       	ldi	r24, 0x84	; 132
 152:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	 while(!(TWCR & (1<<TWINT)));
 156:	ec eb       	ldi	r30, 0xBC	; 188
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	ec f7       	brge	.-6      	; 0x15a <recieve_data_from+0x28>
	while(!(TWCR & (1<<TWINT))); 
}
uint8_t TWI_recieve (void)
{
	//while(!(TWCR & (1<<TWINT)));
	 uint8_t data = TWDR;
 160:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT)|(1<<TWEN);
	 while(!(TWCR & (1<<TWINT)));

	uint8_t data_from = TWI_recieve();
	return data_from;	
}
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <write_data_at>:
void write_data_at (uint8_t addr, uint8_t data)
{
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	d8 2f       	mov	r29, r24
 16e:	c6 2f       	mov	r28, r22
	TWI_start();
 170:	0e 94 69 00 	call	0xd2	; 0xd2 <TWI_start>
	adr_W_R(W);
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 7f 00 	call	0xfe	; 0xfe <adr_W_R>
	TWI_send(addr);
 17a:	8d 2f       	mov	r24, r29
 17c:	0e 94 8e 00 	call	0x11c	; 0x11c <TWI_send>
	TWI_send(data);
 180:	8c 2f       	mov	r24, r28
 182:	0e 94 8e 00 	call	0x11c	; 0x11c <TWI_send>
	TWI_STOP();
 186:	0e 94 77 00 	call	0xee	; 0xee <TWI_STOP>
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <hyro_Init>:
void hyro_Init(void)
{
	UART_setup();
 190:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_setup>
	
	write_data_at(R_PWR_M,0x01);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	8b e6       	ldi	r24, 0x6B	; 107
 198:	0e 94 b4 00 	call	0x168	; 0x168 <write_data_at>
	
	write_data_at(GYRO_CONFIG,0x00);
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	8b e1       	ldi	r24, 0x1B	; 27
 1a0:	0e 94 b4 00 	call	0x168	; 0x168 <write_data_at>
	
	write_data_at(ACCEL_CONFIG,0x00);
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	8c e1       	ldi	r24, 0x1C	; 28
 1a8:	0e 94 b4 00 	call	0x168	; 0x168 <write_data_at>
	
    write_data_at(CONFIG,0x00);
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	8a e1       	ldi	r24, 0x1A	; 26
 1b0:	0e 94 b4 00 	call	0x168	; 0x168 <write_data_at>
 1b4:	08 95       	ret

000001b6 <main>:
}


int main(void)
{ 
	hyro_Init();
 1b6:	0e 94 c8 00 	call	0x190	; 0x190 <hyro_Init>
		TWI_STOP();
		z_gyro[0] = recieve_data_from(GYRO_ZOUT_L);
		TWI_STOP();
		*/
		
		x_accel[0] = recieve_data_from(ACCEL_XOUT_H);
 1ba:	c8 e1       	ldi	r28, 0x18	; 24
 1bc:	d1 e0       	ldi	r29, 0x01	; 1
	hyro_Init();
   while (1) 
    {
		
		
		TWI_start();
 1be:	0e 94 69 00 	call	0xd2	; 0xd2 <TWI_start>
		TWI_STOP();
		z_gyro[0] = recieve_data_from(GYRO_ZOUT_L);
		TWI_STOP();
		*/
		
		x_accel[0] = recieve_data_from(ACCEL_XOUT_H);
 1c2:	8b e3       	ldi	r24, 0x3B	; 59
 1c4:	0e 94 99 00 	call	0x132	; 0x132 <recieve_data_from>
 1c8:	88 83       	st	Y, r24
		TWI_STOP();
 1ca:	0e 94 77 00 	call	0xee	; 0xee <TWI_STOP>
		x_accel[1] = recieve_data_from(ACCEL_XOUT_L);
 1ce:	8c e3       	ldi	r24, 0x3C	; 60
 1d0:	0e 94 99 00 	call	0x132	; 0x132 <recieve_data_from>
 1d4:	89 83       	std	Y+1, r24	; 0x01
	    TWI_STOP();		
 1d6:	0e 94 77 00 	call	0xee	; 0xee <TWI_STOP>
		/*GYRO_X = 0.8*GYRO_X+0.2*x_hyro_full;
		GYRO_Y = 0.8*GYRO_Y+0.2*y_hyro_full;
		GYRO_Z = 0.8*GYRO_Z+0.2*z_hyro_full;*/
		//ACCEL_X = 0.8*ACCEL_X+0.2*x_accel_full;
		 // memcpy(&x_accel,&ACCEL_X,2);
		  UART_sent(x_accel[1]);
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	0e 94 61 00 	call	0xc2	; 0xc2 <UART_sent>
		UART_sent(x_accel[0]);
 1e0:	88 81       	ld	r24, Y
 1e2:	0e 94 61 00 	call	0xc2	; 0xc2 <UART_sent>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	83 ec       	ldi	r24, 0xC3	; 195
 1ea:	99 e0       	ldi	r25, 0x09	; 9
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x36>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x40>
 1f6:	00 00       	nop
 1f8:	e2 cf       	rjmp	.-60     	; 0x1be <main+0x8>

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
