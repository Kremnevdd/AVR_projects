
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002ae  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  0080010a  0080010a  0000034c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f0  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074b  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c8  00000000  00000000  0000142f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  000017f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c1  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021a  00000000  00000000  00001c51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001e6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ea       	ldi	r30, 0xAE	; 174
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 34       	cpi	r26, 0x48	; 72
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 89 00 	call	0x112	; 0x112 <main>
  9e:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
	0x07, //7
	0x7f, //8
	0x6f //9
};
 void setup (){
	 DDRB = 0b00001111;
  a6:	8f e0       	ldi	r24, 0x0F	; 15
  a8:	84 b9       	out	0x04, r24	; 4
	 DDRD= 0b00111000;
  aa:	88 e3       	ldi	r24, 0x38	; 56
  ac:	8a b9       	out	0x0a, r24	; 10
	 PORTD|=(1<<PORTD2);
  ae:	5a 9a       	sbi	0x0b, 2	; 11
	 EICRA |=(1<<ISC01);
  b0:	e9 e6       	ldi	r30, 0x69	; 105
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	80 83       	st	Z, r24
	 EIMSK |=(1<<INT0);
  ba:	e8 9a       	sbi	0x1d, 0	; 29
	 sei();
  bc:	78 94       	sei
	 ADMUX |= (1<<5)|(1<<6);
  be:	ec e7       	ldi	r30, 0x7C	; 124
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 66       	ori	r24, 0x60	; 96
  c6:	80 83       	st	Z, r24
	 ADCSRA |= (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	87 68       	ori	r24, 0x87	; 135
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <Number>:
	 
 }
 void Number (){
	 PORTD &= !(1<<PORTD4);
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	1b b8       	out	0x0b, r1	; 11
	 for(int p=7; p>=0; p--){	 
  d8:	27 e0       	ldi	r18, 0x07	; 7
  da:	30 e0       	ldi	r19, 0x00	; 0
		PORTD &= ~(1<<PORTD3);
  dc:	5b 98       	cbi	0x0b, 3	; 11
		PORTB &= ~(1<<PORTB0);
  de:	28 98       	cbi	0x05, 0	; 5
	    PORTB |= (digit[n]>>p)&(1<<PORTB0);
  e0:	45 b1       	in	r20, 0x05	; 5
  e2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
  e6:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__data_end+0x1>
  ea:	e0 50       	subi	r30, 0x00	; 0
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	90 81       	ld	r25, Z
  f0:	89 2f       	mov	r24, r25
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 2e       	mov	r0, r18
  f6:	02 c0       	rjmp	.+4      	; 0xfc <Number+0x28>
  f8:	95 95       	asr	r25
  fa:	87 95       	ror	r24
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <Number+0x24>
 100:	81 70       	andi	r24, 0x01	; 1
 102:	84 2b       	or	r24, r20
 104:	85 b9       	out	0x05, r24	; 5
	    PORTD |= (1<<PORTD3);
 106:	5b 9a       	sbi	0x0b, 3	; 11
	 ADCSRA |= (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
	 
 }
 void Number (){
	 PORTD &= !(1<<PORTD4);
	 for(int p=7; p>=0; p--){	 
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	31 09       	sbc	r19, r1
 10c:	38 f7       	brcc	.-50     	; 0xdc <Number+0x8>
		PORTD &= ~(1<<PORTD3);
		PORTB &= ~(1<<PORTB0);
	    PORTB |= (digit[n]>>p)&(1<<PORTB0);
	    PORTD |= (1<<PORTD3);
	}
	PORTD |= (1<<PORTD4);	 
 10e:	5c 9a       	sbi	0x0b, 4	; 11
 110:	08 95       	ret

00000112 <main>:
}
int main(void)
{
	setup();
 112:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
    while (1) 
    {
		int max = A[0];
 116:	0f 2e       	mov	r0, r31
 118:	fc e0       	ldi	r31, 0x0C	; 12
 11a:	ef 2e       	mov	r14, r31
 11c:	f1 e0       	ldi	r31, 0x01	; 1
 11e:	ff 2e       	mov	r15, r31
 120:	f0 2d       	mov	r31, r0
		    if (A[i] > max) {
			    max = A[i];
		    }
	    }
		PORTB |=(1<<PORTB3);
		n = max/100; 
 122:	04 e6       	ldi	r16, 0x64	; 100
 124:	10 e0       	ldi	r17, 0x00	; 0
		Number();
		PORTB &= ~(1<<PORTB1);
		_delay_ms(5);
		n= max/10;
		n=n%10;
 126:	ca e0       	ldi	r28, 0x0A	; 10
 128:	d0 e0       	ldi	r29, 0x00	; 0
int main(void)
{
	setup();
    while (1) 
    {
		int max = A[0];
 12a:	f7 01       	movw	r30, r14
 12c:	c0 80       	ld	r12, Z
 12e:	d1 80       	ldd	r13, Z+1	; 0x01
	    for (int i = 1; i < 30; i++) {
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
		    if (A[i] > max) {
 134:	fc 01       	movw	r30, r24
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	e4 5f       	subi	r30, 0xF4	; 244
 13c:	fe 4f       	sbci	r31, 0xFE	; 254
 13e:	20 81       	ld	r18, Z
 140:	31 81       	ldd	r19, Z+1	; 0x01
 142:	c2 16       	cp	r12, r18
 144:	d3 06       	cpc	r13, r19
 146:	3c f4       	brge	.+14     	; 0x156 <main+0x44>
			    max = A[i];
 148:	fc 01       	movw	r30, r24
 14a:	ee 0f       	add	r30, r30
 14c:	ff 1f       	adc	r31, r31
 14e:	e4 5f       	subi	r30, 0xF4	; 244
 150:	fe 4f       	sbci	r31, 0xFE	; 254
 152:	c0 80       	ld	r12, Z
 154:	d1 80       	ldd	r13, Z+1	; 0x01
{
	setup();
    while (1) 
    {
		int max = A[0];
	    for (int i = 1; i < 30; i++) {
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	8e 31       	cpi	r24, 0x1E	; 30
 15a:	91 05       	cpc	r25, r1
 15c:	59 f7       	brne	.-42     	; 0x134 <main+0x22>
		    if (A[i] > max) {
			    max = A[i];
		    }
	    }
		PORTB |=(1<<PORTB3);
 15e:	2b 9a       	sbi	0x05, 3	; 5
		n = max/100; 
 160:	c6 01       	movw	r24, r12
 162:	b8 01       	movw	r22, r16
 164:	0e 94 2d 01 	call	0x25a	; 0x25a <__divmodhi4>
 168:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
 16c:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
		Number();
 170:	0e 94 6a 00 	call	0xd4	; 0xd4 <Number>
		PORTB &= ~(1<<PORTB1);
 174:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	8f e1       	ldi	r24, 0x1F	; 31
 178:	9e e4       	ldi	r25, 0x4E	; 78
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0x68>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x6e>
 180:	00 00       	nop
		_delay_ms(5);
		n= max/10;
		n=n%10;
 182:	c6 01       	movw	r24, r12
 184:	be 01       	movw	r22, r28
 186:	0e 94 2d 01 	call	0x25a	; 0x25a <__divmodhi4>
 18a:	6c 01       	movw	r12, r24
 18c:	cb 01       	movw	r24, r22
 18e:	be 01       	movw	r22, r28
 190:	0e 94 2d 01 	call	0x25a	; 0x25a <__divmodhi4>
 194:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 198:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		PORTB |= (1<<PORTB1);
 19c:	29 9a       	sbi	0x05, 1	; 5
		Number();
 19e:	0e 94 6a 00 	call	0xd4	; 0xd4 <Number>
		PORTB &= ~(1<<PORTB2);
 1a2:	2a 98       	cbi	0x05, 2	; 5
 1a4:	ef e1       	ldi	r30, 0x1F	; 31
 1a6:	fe e4       	ldi	r31, 0x4E	; 78
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0x96>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x9c>
 1ae:	00 00       	nop
		_delay_ms(5);
		n= max%10;
 1b0:	d0 92 0b 01 	sts	0x010B, r13	; 0x80010b <__data_end+0x1>
 1b4:	c0 92 0a 01 	sts	0x010A, r12	; 0x80010a <__data_end>
		PORTB |=(1<<PORTB2);
 1b8:	2a 9a       	sbi	0x05, 2	; 5
		Number(3);
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 6a 00 	call	0xd4	; 0xd4 <Number>
		PORTB &= ~(1<<PORTB3);
 1c2:	2b 98       	cbi	0x05, 3	; 5
 1c4:	8f e1       	ldi	r24, 0x1F	; 31
 1c6:	9e e4       	ldi	r25, 0x4E	; 78
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0xb6>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0xbc>
 1ce:	00 00       	nop
 1d0:	ac cf       	rjmp	.-168    	; 0x12a <main+0x18>

000001d2 <__vector_1>:
		_delay_ms(5);
    }
}
ISR (INT0_vect){
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	ef 93       	push	r30
 1f0:	ff 93       	push	r31
	for(int i=0; i<30;i++){
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
		ADCSRA|= (1<<ADSC);
 1f6:	ea e7       	ldi	r30, 0x7A	; 122
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
		while(ADCSRA &(1<<ADSC));
		A[i]=ADCH;
 1fa:	c9 e7       	ldi	r28, 0x79	; 121
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_ms(5);
    }
}
ISR (INT0_vect){
	for(int i=0; i<30;i++){
		ADCSRA|= (1<<ADSC);
 1fe:	80 81       	ld	r24, Z
 200:	80 64       	ori	r24, 0x40	; 64
 202:	80 83       	st	Z, r24
		while(ADCSRA &(1<<ADSC));
 204:	80 81       	ld	r24, Z
 206:	86 fd       	sbrc	r24, 6
 208:	fd cf       	rjmp	.-6      	; 0x204 <__vector_1+0x32>
		A[i]=ADCH;
 20a:	88 81       	ld	r24, Y
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	d9 01       	movw	r26, r18
 210:	aa 0f       	add	r26, r26
 212:	bb 1f       	adc	r27, r27
 214:	a4 5f       	subi	r26, 0xF4	; 244
 216:	be 4f       	sbci	r27, 0xFE	; 254
 218:	11 96       	adiw	r26, 0x01	; 1
 21a:	9c 93       	st	X, r25
 21c:	8e 93       	st	-X, r24
 21e:	4f ef       	ldi	r20, 0xFF	; 255
 220:	80 e7       	ldi	r24, 0x70	; 112
 222:	92 e0       	ldi	r25, 0x02	; 2
 224:	41 50       	subi	r20, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <__vector_1+0x52>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <__vector_1+0x5c>
 22e:	00 00       	nop
		PORTB &= ~(1<<PORTB3);
		_delay_ms(5);
    }
}
ISR (INT0_vect){
	for(int i=0; i<30;i++){
 230:	2f 5f       	subi	r18, 0xFF	; 255
 232:	3f 4f       	sbci	r19, 0xFF	; 255
 234:	2e 31       	cpi	r18, 0x1E	; 30
 236:	31 05       	cpc	r19, r1
 238:	11 f7       	brne	.-60     	; 0x1fe <__vector_1+0x2c>
		ADCSRA|= (1<<ADSC);
		while(ADCSRA &(1<<ADSC));
		A[i]=ADCH;
		_delay_ms(50);
	}
}
 23a:	ff 91       	pop	r31
 23c:	ef 91       	pop	r30
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	4f 91       	pop	r20
 24c:	3f 91       	pop	r19
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <__divmodhi4>:
 25a:	97 fb       	bst	r25, 7
 25c:	07 2e       	mov	r0, r23
 25e:	16 f4       	brtc	.+4      	; 0x264 <__divmodhi4+0xa>
 260:	00 94       	com	r0
 262:	07 d0       	rcall	.+14     	; 0x272 <__divmodhi4_neg1>
 264:	77 fd       	sbrc	r23, 7
 266:	09 d0       	rcall	.+18     	; 0x27a <__divmodhi4_neg2>
 268:	0e 94 41 01 	call	0x282	; 0x282 <__udivmodhi4>
 26c:	07 fc       	sbrc	r0, 7
 26e:	05 d0       	rcall	.+10     	; 0x27a <__divmodhi4_neg2>
 270:	3e f4       	brtc	.+14     	; 0x280 <__divmodhi4_exit>

00000272 <__divmodhi4_neg1>:
 272:	90 95       	com	r25
 274:	81 95       	neg	r24
 276:	9f 4f       	sbci	r25, 0xFF	; 255
 278:	08 95       	ret

0000027a <__divmodhi4_neg2>:
 27a:	70 95       	com	r23
 27c:	61 95       	neg	r22
 27e:	7f 4f       	sbci	r23, 0xFF	; 255

00000280 <__divmodhi4_exit>:
 280:	08 95       	ret

00000282 <__udivmodhi4>:
 282:	aa 1b       	sub	r26, r26
 284:	bb 1b       	sub	r27, r27
 286:	51 e1       	ldi	r21, 0x11	; 17
 288:	07 c0       	rjmp	.+14     	; 0x298 <__udivmodhi4_ep>

0000028a <__udivmodhi4_loop>:
 28a:	aa 1f       	adc	r26, r26
 28c:	bb 1f       	adc	r27, r27
 28e:	a6 17       	cp	r26, r22
 290:	b7 07       	cpc	r27, r23
 292:	10 f0       	brcs	.+4      	; 0x298 <__udivmodhi4_ep>
 294:	a6 1b       	sub	r26, r22
 296:	b7 0b       	sbc	r27, r23

00000298 <__udivmodhi4_ep>:
 298:	88 1f       	adc	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	5a 95       	dec	r21
 29e:	a9 f7       	brne	.-22     	; 0x28a <__udivmodhi4_loop>
 2a0:	80 95       	com	r24
 2a2:	90 95       	com	r25
 2a4:	bc 01       	movw	r22, r24
 2a6:	cd 01       	movw	r24, r26
 2a8:	08 95       	ret

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
