
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000016c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000516  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000048c  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026a  00000000  00000000  00000ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002b6  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000098  00000000  00000000  000010f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000118e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	1b d0       	rcall	.+54     	; 0x72 <main>
  3c:	5b c0       	rjmp	.+182    	; 0xf4 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <send>:
#define F_CPU 4000000L 
#include <avr/io.h>
#include <util/delay.h>
int D;
void send(){
	 PORTB &=~(1<<PB2);// LATCH
  40:	c2 98       	cbi	0x18, 2	; 24
	 for(int p=7; p>=0; p--){
  42:	27 e0       	ldi	r18, 0x07	; 7
  44:	30 e0       	ldi	r19, 0x00	; 0
	    PORTB |= (D>>p)&(1<<PB0);// DS
  46:	48 b3       	in	r20, 0x18	; 24
  48:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  4c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  50:	02 2e       	mov	r0, r18
  52:	02 c0       	rjmp	.+4      	; 0x58 <send+0x18>
  54:	95 95       	asr	r25
  56:	87 95       	ror	r24
  58:	0a 94       	dec	r0
  5a:	e2 f7       	brpl	.-8      	; 0x54 <send+0x14>
  5c:	81 70       	andi	r24, 0x01	; 1
  5e:	84 2b       	or	r24, r20
  60:	88 bb       	out	0x18, r24	; 24
		PORTB |=(1<<PB1);//SCK
  62:	c1 9a       	sbi	0x18, 1	; 24
	    	//_delay_ms(200);
			PORTB &=~(1<<PB0);
  64:	c0 98       	cbi	0x18, 0	; 24
		   PORTB &=~(1<<PB1);	
  66:	c1 98       	cbi	0x18, 1	; 24
#include <avr/io.h>
#include <util/delay.h>
int D;
void send(){
	 PORTB &=~(1<<PB2);// LATCH
	 for(int p=7; p>=0; p--){
  68:	21 50       	subi	r18, 0x01	; 1
  6a:	31 09       	sbc	r19, r1
  6c:	60 f7       	brcc	.-40     	; 0x46 <send+0x6>
	    	//_delay_ms(200);
			PORTB &=~(1<<PB0);
		   PORTB &=~(1<<PB1);	
		  // _delay_ms(200);		
}
     PORTB |= (1<<PB2);//LaTch
  6e:	c2 9a       	sbi	0x18, 2	; 24
  70:	08 95       	ret

00000072 <main>:
	// _delay_ms(100);
}
int main(void)
{DDRB |= (1<<PB0)|(1<<PB1)|(1<<PB2);
  72:	87 b3       	in	r24, 0x17	; 23
  74:	87 60       	ori	r24, 0x07	; 7
  76:	87 bb       	out	0x17, r24	; 23
	DDRB &=~(1<<PB3);
  78:	bb 98       	cbi	0x17, 3	; 23
	PORTB |=(1<<PB3);
  7a:	c3 9a       	sbi	0x18, 3	; 24
    int c =1;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	90 e0       	ldi	r25, 0x00	; 0
				{
					c=2;
				}
				break;
			case 2 : 
			D=0b10101010;
  80:	0f 2e       	mov	r0, r31
  82:	fa ea       	ldi	r31, 0xAA	; 170
  84:	cf 2e       	mov	r12, r31
  86:	d1 2c       	mov	r13, r1
  88:	f0 2d       	mov	r31, r0
			send();
			if ((!PINB &(1<<PB3))==0)
			{
				c=3;
  8a:	0f 2e       	mov	r0, r31
  8c:	f3 e0       	ldi	r31, 0x03	; 3
  8e:	8f 2e       	mov	r8, r31
  90:	f0 2d       	mov	r31, r0
  92:	91 2c       	mov	r9, r1
			}
			break;
			case  3 : 
			D=0b11001101;
  94:	0f 2e       	mov	r0, r31
  96:	fd ec       	ldi	r31, 0xCD	; 205
  98:	ef 2e       	mov	r14, r31
  9a:	f1 2c       	mov	r15, r1
  9c:	f0 2d       	mov	r31, r0
			send();
			if ((!PINB &(1<<PB3))==0)
			{
				c=1;
  9e:	aa 24       	eor	r10, r10
  a0:	a3 94       	inc	r10
  a2:	b1 2c       	mov	r11, r1
    while (1) 
    {
		switch (c)
		{
				case 1 : 
				D=0b0111000;
  a4:	08 e3       	ldi	r16, 0x38	; 56
  a6:	10 e0       	ldi	r17, 0x00	; 0
				send();
				if ((!PINB &(1<<PB3))==0)
				{
					c=2;
  a8:	d2 e0       	ldi	r29, 0x02	; 2
  aa:	c0 e0       	ldi	r28, 0x00	; 0
	DDRB &=~(1<<PB3);
	PORTB |=(1<<PB3);
    int c =1;
    while (1) 
    {
		switch (c)
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	91 05       	cpc	r25, r1
  b0:	79 f0       	breq	.+30     	; 0xd0 <main+0x5e>
  b2:	83 30       	cpi	r24, 0x03	; 3
  b4:	91 05       	cpc	r25, r1
  b6:	a9 f0       	breq	.+42     	; 0xe2 <main+0x70>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	91 05       	cpc	r25, r1
  bc:	b9 f7       	brne	.-18     	; 0xac <main+0x3a>
		{
				case 1 : 
				D=0b0111000;
  be:	10 93 61 00 	sts	0x0061, r17	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c2:	00 93 60 00 	sts	0x0060, r16	; 0x800060 <__DATA_REGION_ORIGIN__>
				send();
  c6:	bc df       	rcall	.-136    	; 0x40 <send>
				if ((!PINB &(1<<PB3))==0)
  c8:	86 b3       	in	r24, 0x16	; 22
				{
					c=2;
  ca:	8d 2f       	mov	r24, r29
  cc:	9c 2f       	mov	r25, r28
  ce:	ee cf       	rjmp	.-36     	; 0xac <main+0x3a>
				}
				break;
			case 2 : 
			D=0b10101010;
  d0:	d0 92 61 00 	sts	0x0061, r13	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d4:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__DATA_REGION_ORIGIN__>
			send();
  d8:	b3 df       	rcall	.-154    	; 0x40 <send>
			if ((!PINB &(1<<PB3))==0)
  da:	86 b3       	in	r24, 0x16	; 22
			{
				c=3;
  dc:	88 2d       	mov	r24, r8
  de:	99 2d       	mov	r25, r9
  e0:	e5 cf       	rjmp	.-54     	; 0xac <main+0x3a>
			}
			break;
			case  3 : 
			D=0b11001101;
  e2:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e6:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <__DATA_REGION_ORIGIN__>
			send();
  ea:	aa df       	rcall	.-172    	; 0x40 <send>
			if ((!PINB &(1<<PB3))==0)
  ec:	86 b3       	in	r24, 0x16	; 22
			{
				c=1;
  ee:	8a 2d       	mov	r24, r10
  f0:	9b 2d       	mov	r25, r11
  f2:	dc cf       	rjmp	.-72     	; 0xac <main+0x3a>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
