
GeneratoR-Penetrator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002a6  0000033a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800104  00800104  0000033e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000790  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066b  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000276  00000000  00000000  000011e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  0000145c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000391  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001889  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001954  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  9e:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <timer_setup>:
volatile long int freq = 10;
volatile int i=0;
long int delay;
volatile char recieve=0;
void timer_setup(){
DDRB|= (1<<PORTB1);	
  a6:	21 9a       	sbi	0x04, 1	; 4
TCCR1A|= (1<< COM1A0);
  a8:	e0 e8       	ldi	r30, 0x80	; 128
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
TCCR1B |= (1<<CS12)|(1<< CS10)|(1<<WGM12);
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8d 60       	ori	r24, 0x0D	; 13
  ba:	80 83       	st	Z, r24
OCR1A = (F_CPU/(freq*2*1024)-1);
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  c4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  c8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
  cc:	9c 01       	movw	r18, r24
  ce:	ad 01       	movw	r20, r26
  d0:	01 2e       	mov	r0, r17
  d2:	1b e0       	ldi	r17, 0x0B	; 11
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	44 1f       	adc	r20, r20
  da:	55 1f       	adc	r21, r21
  dc:	1a 95       	dec	r17
  de:	d1 f7       	brne	.-12     	; 0xd4 <timer_setup+0x2e>
  e0:	10 2d       	mov	r17, r0
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	74 e2       	ldi	r23, 0x24	; 36
  e6:	84 ef       	ldi	r24, 0xF4	; 244
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 10 01 	call	0x220	; 0x220 <__divmodsi4>
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	31 09       	sbc	r19, r1
  f2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  f6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  fa:	08 95       	ret

000000fc <UART_setup>:
}


void UART_setup (){
	UCSR0B |= (1<<TXEN0)|(1<<RXEN0)|(1<<RXCIE0);
  fc:	e1 ec       	ldi	r30, 0xC1	; 193
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	88 69       	ori	r24, 0x98	; 152
 104:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ00)|(1<<UCSZ01);
 106:	e2 ec       	ldi	r30, 0xC2	; 194
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	86 60       	ori	r24, 0x06	; 6
 10e:	80 83       	st	Z, r24
	UBRR0L = 103; // 16MHz: baudrate 9600
 110:	87 e6       	ldi	r24, 0x67	; 103
 112:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	sei();
 116:	78 94       	sei
 118:	08 95       	ret

0000011a <main>:
}

int main(void)
{
  UART_setup();
 11a:	0e 94 7e 00 	call	0xfc	; 0xfc <UART_setup>
  timer_setup();
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <timer_setup>
  UCSR0A|= (1<<RXC0);
 122:	e0 ec       	ldi	r30, 0xC0	; 192
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	80 83       	st	Z, r24
  
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	08 95       	ret

00000132 <__vector_18>:

ISR(USART_RX_vect){
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	2f 93       	push	r18
 13e:	3f 93       	push	r19
 140:	4f 93       	push	r20
 142:	5f 93       	push	r21
 144:	6f 93       	push	r22
 146:	7f 93       	push	r23
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
 14c:	af 93       	push	r26
 14e:	bf 93       	push	r27
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
	byte[i]=UDR0;
 154:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__data_end>
 158:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <__data_end+0x1>
 15c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 160:	e5 5f       	subi	r30, 0xF5	; 245
 162:	fe 4f       	sbci	r31, 0xFE	; 254
 164:	80 83       	st	Z, r24
	i++;
 166:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 16a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 174:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	if (i==4){
 178:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 17c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 180:	04 97       	sbiw	r24, 0x04	; 4
 182:	99 f5       	brne	.+102    	; 0x1ea <__vector_18+0xb8>
		i=0;
 184:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 188:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
		memcpy(&freq,&byte,4);
 18c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <byte>
 190:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <byte+0x1>
 194:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <byte+0x2>
 198:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <byte+0x3>
 19c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1a4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 1a8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
		OCR1A = (F_CPU/(freq*2*1024)-1);
 1ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1b4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1b8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1bc:	9c 01       	movw	r18, r24
 1be:	ad 01       	movw	r20, r26
 1c0:	01 2e       	mov	r0, r17
 1c2:	1b e0       	ldi	r17, 0x0B	; 11
 1c4:	22 0f       	add	r18, r18
 1c6:	33 1f       	adc	r19, r19
 1c8:	44 1f       	adc	r20, r20
 1ca:	55 1f       	adc	r21, r21
 1cc:	1a 95       	dec	r17
 1ce:	d1 f7       	brne	.-12     	; 0x1c4 <__vector_18+0x92>
 1d0:	10 2d       	mov	r17, r0
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	74 e2       	ldi	r23, 0x24	; 36
 1d6:	84 ef       	ldi	r24, 0xF4	; 244
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 10 01 	call	0x220	; 0x220 <__divmodsi4>
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	31 09       	sbc	r19, r1
 1e2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 1e6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		
	}
	UDR0 = freq;
 1ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1f2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1f6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	7f 91       	pop	r23
 20c:	6f 91       	pop	r22
 20e:	5f 91       	pop	r21
 210:	4f 91       	pop	r20
 212:	3f 91       	pop	r19
 214:	2f 91       	pop	r18
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <__divmodsi4>:
 220:	05 2e       	mov	r0, r21
 222:	97 fb       	bst	r25, 7
 224:	1e f4       	brtc	.+6      	; 0x22c <__divmodsi4+0xc>
 226:	00 94       	com	r0
 228:	0e 94 27 01 	call	0x24e	; 0x24e <__negsi2>
 22c:	57 fd       	sbrc	r21, 7
 22e:	07 d0       	rcall	.+14     	; 0x23e <__divmodsi4_neg2>
 230:	0e 94 2f 01 	call	0x25e	; 0x25e <__udivmodsi4>
 234:	07 fc       	sbrc	r0, 7
 236:	03 d0       	rcall	.+6      	; 0x23e <__divmodsi4_neg2>
 238:	4e f4       	brtc	.+18     	; 0x24c <__divmodsi4_exit>
 23a:	0c 94 27 01 	jmp	0x24e	; 0x24e <__negsi2>

0000023e <__divmodsi4_neg2>:
 23e:	50 95       	com	r21
 240:	40 95       	com	r20
 242:	30 95       	com	r19
 244:	21 95       	neg	r18
 246:	3f 4f       	sbci	r19, 0xFF	; 255
 248:	4f 4f       	sbci	r20, 0xFF	; 255
 24a:	5f 4f       	sbci	r21, 0xFF	; 255

0000024c <__divmodsi4_exit>:
 24c:	08 95       	ret

0000024e <__negsi2>:
 24e:	90 95       	com	r25
 250:	80 95       	com	r24
 252:	70 95       	com	r23
 254:	61 95       	neg	r22
 256:	7f 4f       	sbci	r23, 0xFF	; 255
 258:	8f 4f       	sbci	r24, 0xFF	; 255
 25a:	9f 4f       	sbci	r25, 0xFF	; 255
 25c:	08 95       	ret

0000025e <__udivmodsi4>:
 25e:	a1 e2       	ldi	r26, 0x21	; 33
 260:	1a 2e       	mov	r1, r26
 262:	aa 1b       	sub	r26, r26
 264:	bb 1b       	sub	r27, r27
 266:	fd 01       	movw	r30, r26
 268:	0d c0       	rjmp	.+26     	; 0x284 <__udivmodsi4_ep>

0000026a <__udivmodsi4_loop>:
 26a:	aa 1f       	adc	r26, r26
 26c:	bb 1f       	adc	r27, r27
 26e:	ee 1f       	adc	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	a2 17       	cp	r26, r18
 274:	b3 07       	cpc	r27, r19
 276:	e4 07       	cpc	r30, r20
 278:	f5 07       	cpc	r31, r21
 27a:	20 f0       	brcs	.+8      	; 0x284 <__udivmodsi4_ep>
 27c:	a2 1b       	sub	r26, r18
 27e:	b3 0b       	sbc	r27, r19
 280:	e4 0b       	sbc	r30, r20
 282:	f5 0b       	sbc	r31, r21

00000284 <__udivmodsi4_ep>:
 284:	66 1f       	adc	r22, r22
 286:	77 1f       	adc	r23, r23
 288:	88 1f       	adc	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	1a 94       	dec	r1
 28e:	69 f7       	brne	.-38     	; 0x26a <__udivmodsi4_loop>
 290:	60 95       	com	r22
 292:	70 95       	com	r23
 294:	80 95       	com	r24
 296:	90 95       	com	r25
 298:	9b 01       	movw	r18, r22
 29a:	ac 01       	movw	r20, r24
 29c:	bd 01       	movw	r22, r26
 29e:	cf 01       	movw	r24, r30
 2a0:	08 95       	ret

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
